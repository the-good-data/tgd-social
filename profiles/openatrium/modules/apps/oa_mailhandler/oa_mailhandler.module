<?php

/**
 * @file
 * Code for the Open Atrium Mailhandler feature.
 */

include_once 'oa_mailhandler.feeds.inc';
include_once 'oa_mailhandler.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function oa_mailhandler_ctools_plugin_directory($owner, $plugin_type) {
  return 'plugins/' . $owner . '/' . $plugin_type;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function oa_mailhandler_form_system_site_information_settings_alter(&$form, &$form_state) {
  $form['site_information']['mailcomment_mailbox'] = array(
    '#type' => 'textfield',
    '#title' => t('Mailbox E-mail address'),
    '#description' => t("The email address that corresponds with the !mailbox that you've setup to ingest email replies for !comments and !discussions. Like the site email address, this email address should use this site's domain to avoid being filtered as spam.", array(
      '!mailbox' => l(t('mailbox'), 'admin/structure/mailhandler'),
      '!comments' => l(t('comments'), 'import/comment_reply_email_importer'),
      '!discussions' => l(t('discussions'), 'import/discussion_reply_email_importer'),
    )),
    '#default_value' => variable_get('mailcomment_mailbox', ''),
  );
}

/**
 * Implements hook_mail_alter().
 */
function oa_mailhandler_mail_alter(&$message) {
  if ($message['module'] != 'message_notify') {
    return;
  }

  $message_entity = $message['params']['message_entity'];
  $recipient_uid = $message['params']['message_entity']->uid;
  $recipient = user_load($message_entity->uid);

  $node = isset($message_entity->field_oa_node_ref) ?
    node_load($message_entity->field_oa_node_ref['und'][0]['target_id']) : NULL;

  if (!$node) {
    return;
  }

  // Return early if this user doesn't have permission to reply to this message.
  if ($node->type == 'oa_discussion_post') {
    $space_nid = oa_core_get_group_from_node($node->nid);
    if (!og_user_access('node', $space_nid, 'write oa_discussion_reply to discussion post', $recipient)) {
      return;
    }
  }
  elseif ($node->comment != COMMENT_NODE_OPEN || !user_access('post comments', $recipient)) {
    return;
  }

  // Work Tracker 1.0-beta1 (included with Open Atrium 1.0-rc1) uses a different
  // comment reference field name.
  $field_comment_ref = isset($message_entity->field_oa_worktracker_comment_ref) ?
    'field_oa_worktracker_comment_ref' : 'field_oa_comment_ref';

  $messageid_params = array();
  if (isset($message_entity->$field_comment_ref)) {
    // This is a comment.
    $cid = $message_entity->{$field_comment_ref}['und'][0]['target_id'];
    $comment = comment_load($cid);
    $messageid_params['uid'] = $comment->uid;
    $messageid_params['cid'] = $comment->cid;
    $messageid_params['nid'] = $comment->nid;
    $messageid_params['time'] = $comment->created;
    $ancestor_msg_id = mailcomment_mail_comment_ancestor_message_id($messageid_params['nid'], $messageid_params['cid']);
    if (variable_get('mailcomment_alter_subjects', 1)) {
      $subject = $message['subject'];
      $subject = t('Re:') . ' ' . $subject;
      $message['subject'] = $subject;
    }
  }
  elseif (!empty($node)) {
    // This is a node.
    $messageid_params['uid'] = $node->uid;
    $messageid_params['nid'] = $node->nid;
    $messageid_params['cid'] = 0;
    $messageid_params['time'] = $node->created;
    if (variable_get('mailcomment_alter_subjects', 1)) {
      $subject = $message['subject'];
      $subject = t('Re:') . ' ' . $subject;
      $message['subject'] = $subject;
    }
  }
  else {
    // Don't know what this is.
    return;
  }

  $message['headers']['Message-ID'] = mailcomment_build_messageid($messageid_params);

  // Add the security token to the subject (verified by OaMailParser)
  $token_node = ($node->type == 'oa_discussion_post' && !empty($node->oa_parent['und'][0]['target_id']))
    ? node_load($node->oa_parent['und'][0]['target_id']) : $node;
  $message['subject'] .= ' ' . oa_mailhandler_generate_security_token($token_node);

  // Set the reply-to header to the mailbox, rather than the site_mail if set.
  $reply = variable_get('mailcomment_mailbox', variable_get('site_mail', ini_get('sendmail_from')));
  $message['headers']['Reply-To'] = $reply;

  // Add marker text into the message header part taking care of already existing text
  $insert_reply_text = variable_get('mailcomment_insert_reply_text', 1);
  $text = variable_get('mailcomment_reply_text', t('((( Reply ABOVE this LINE to POST a COMMENT )))'));
  $seperator = "<br />\n<br />\n";
  if ($text && $insert_reply_text) {
    $prefix = array($text);
    $prefix[] = $message['body'][0];
    $body = implode($seperator, $prefix);
    $message['body'][0] = $body;
  }

  $messageid_params['uid'] = $recipient->uid;
  $message['body'][0] .=  $seperator . "View original post: " . url('mailcomment/redirect/' . mailcomment_build_messageid($messageid_params), array('absolute' => TRUE));
  if (isset($ancestor_msg_id)) {
    $message['headers']['In-Reply-To'] = $ancestor_msg_id;
  }
}

/**
 * Generate the security token.
 *
 * @param object $node
 *   The node to generate the security token for.
 *
 * @return string
 *   The security token string.
 */
function oa_mailhandler_generate_security_token($node) {
  return '[#' . $node->nid . '-' . substr(md5($node->nid . ':' . $node->created), 0, 6) . ']';
}

/**
 * Get the node from the subject line (verifying the security token).
 *
 * @param string $subject
 *   A string that contains a token (ex. an email subject line).
 *
 * @return object
 *   The node if the security token is valid; NULL otherwise.
 */
function oa_mailhandler_get_node_from_subject($subject) {
  preg_match('/\[#(\d+)-([^\]]+)\]/', $subject, $matches);
  if (isset($matches[1]) && isset($matches[2])) {
    $token = $matches[0];
    $nid = $matches[1];
    $node = node_load($nid);

    // verify token security for node
    if (oa_mailhandler_generate_security_token($node) == $token) {
      return $node;
    }
  }
}

