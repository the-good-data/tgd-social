<?php
/**
 * @file
 * Code for Utility functions for OpenAtrium spaces
 *
 * Also contains various node hooks (update,delete,insert) for cache handling
 */

/**
 * Name of various caches.
 */
define('OA_CACHE_GROUPS_BY_USER', 'oa_groups_by_user');
define('OA_CACHE_GROUPS_BY_USER_ACCESS', 'oa_groups_by_user_access');
define('OA_CACHE_GET_PARENTS', 'oa_get_parents');
define('OA_CACHE_GROUPS_BY_PARENT', 'oa_groups_by_parent');
define('OA_CACHE_TOP_PARENTS', 'oa_top_parents');

/**
 * Get the group IDs of all the groups a user is an approved member of.
 *
 * REPLACES og_get_groups_by_user() in OG and returns a list of groups
 * including subspaces including via INHERITED membership
 *
 * @param $account
 *   (optional) The user object to fetch group memberships for. Defaults to the
 *   acting user.
 * @param $group_type
 *   (optional) The entity type of the groups to fetch. By default all group
 *   types will be fetched. (e.g. 'node', 'user')
 * @param bool $include_archived
 *   (optional) Whether to include archived nodes or not. By default, archived
 *   items aren't included.
 *
 * @return array
 *   An array with the group IDs or an empty array, or returns NULL if there was an error
 */
function oa_core_get_groups_by_user($account = NULL, $group_type = NULL, $include_archived = FALSE) {
  if (!isset($account)) {
    global $user;
    $account = $user;
  }

  $cid = oa_core_get_cache_id(OA_CACHE_GROUPS_BY_USER, $account->uid, $include_archived, array($group_type));
  if (oa_core_get_cache(OA_CACHE_GROUPS_BY_USER, $cid, $result)) {
    return $result;
  }

  $user_groups = og_get_groups_by_user($account, $group_type);
  if (!empty($group_type) && !empty($user_groups)) {
    $user_groups = array($group_type => $user_groups);
  }
  if (module_exists('og_subgroups') && !empty($user_groups)) {
    $user_groups = og_subgroups_children_load_multiple($user_groups);
  }

  if (module_exists('flag') && !empty($user_groups) && !$include_archived) {
    if ($flag = flag_get_flag('trash')) {
      // Filter out groups that are archived.
      foreach ($user_groups['node'] as $nid) {
        if ($flag->is_flagged($nid)) {
          unset($user_groups['node'][$nid]);
        }
      }
    }
  }

  if (!empty($group_type)) {
    $user_groups = (!empty($user_groups[$group_type])) ? $user_groups[$group_type] : array();
  }

  oa_core_set_cache(OA_CACHE_GROUPS_BY_USER, $cid, $user_groups);

  return $user_groups;
}

/**
 * Get the group IDs and Titles of all the groups a user is an approved member of.
 *
 * SIMILAR to oa_core_get_groups_by_user above but respects the NODE ACCESS
 * of the spaces and allows an optional space status (published)
 * Only returns spaces a user is ACTIVE in (not BLOCKED or PENDING)
 * Also, returns both nids and titles in result
 *
 * DOES NOT return INHERITED subspaces
 *
 * @param $account
 *   (optional) The user object to fetch group memberships for. Defaults to the
 *   acting user.  Can be a full user node or just a user uid
 * @param bool $include_archived
 *   (optional) Whether to include archived nodes or not. By default, archived
 *   items aren't included.
 * @param int $status
 *   (optional) The space node status to include.  If NULL, all spaces are
 *   included.  If NODE_PUBLISHED, then only include published spaces
 * @param array $page
 *   (optional) Adds a pager to the query for the given page number
 * @param string $filter
 *   (optional) Filters the space titles that are returned
 *
 * @return array
 *   An array with the group IDs or an empty array, or returns NULL if there was an error
 */
function oa_core_get_groups_by_user_access($account = NULL, $include_archived = FALSE, $status = NULL, $page = NULL, $filter = NULL) {
  if (!isset($account)) {
    global $user;
    $uid = $user->uid;
  }
  elseif (is_numeric($account)) {
    $uid = $account;
  }
  else {
    $uid = $account->uid;
  }

  if (empty($states)) {
    $states = array(OG_STATE_ACTIVE);
  }

  $cid = oa_core_get_cache_id(OA_CACHE_GROUPS_BY_USER_ACCESS, $uid, $include_archived, array($status, $page));
  if (empty($filter) && oa_core_get_cache(OA_CACHE_GROUPS_BY_USER_ACCESS, $cid, $result)) {
    return $result;
  }

  $query = db_select('node', 'n');
  if (isset($page)) {
    if (!isset($_GET['page'])) {
      $_GET['page'] = $page;
    }
    $query = $query->extend('PagerDefault')->limit(20);
  }

  $query->join('og_membership', 'ogm', 'ogm.gid = n.nid');
  $query
    ->fields('n', array('nid', 'title'))
    ->condition('ogm.etid', $uid)
    ->condition('ogm.entity_type', 'user')
    ->condition('ogm.state', OG_STATE_ACTIVE)
    ->orderBy('n.title')
    ->addTag('node_access');

  if (isset($status)) {
    $query->condition('n.status', $status);
  }

  if (!empty($filter)) {
    $query->condition('n.title', '%' . db_like($filter) . '%', 'LIKE');
  }

  if (module_exists('flag') && !$include_archived) {
    if ($flag = flag_get_flag('trash')) {
      $query->leftJoin('flag_content', 'a', "a.fid = :fid AND a.content_id = n.nid", array(':fid' => $flag->fid));
      // This makes sure that archived content isn't included, because 'uid'
      // will be NULL if the join didn't connect anything.
      $query->isNull('a.uid');
    }
  }

  $result = $query
    ->execute()
    ->fetchAll();

  if (empty($filter)) {
    oa_core_set_cache(OA_CACHE_GROUPS_BY_USER_ACCESS, $cid, $result);
  }

  return $result;
}

/**
 * Returns the current space id context
 * @param  boolean $from_session only use the context stored in $SESSION
 * @return int Space ID
 */
function oa_core_get_space_context($from_session = FALSE) {
  if (variable_get('install_task') !== 'done') {
    // don't run this during the installer
    return 0;
  }
  if ($from_session && defined('OG_SESSION_CONTEXT_ID') && isset($_SESSION[OG_SESSION_CONTEXT_ID])) {
    return $_SESSION[OG_SESSION_CONTEXT_ID];
  }
  $context = og_context('node');
  if (!empty($context['gid'])) {
    return $context['gid'];
  }
  else {
    return og_session_context_get_context();
  }
}

/**
 * Returns the current space id context
 * Returns zero if on the site home page
 * @param  boolean $from_session only use the context stored in $SESSION
 * @return int Space ID
 */
function oa_core_get_space_home_context() {
  if (variable_get('install_task') !== 'done') {
    // don't run this during the installer
    return 0;
  }
  $space_id = oa_core_get_space_context();
  $node = menu_get_object();
  if (drupal_is_front_page() && !(isset($node) && ($node->type == OA_SPACE_TYPE))) {
    return 0;  // front page, not a space page
  }
  return $space_id;
}

/**
 * Returns the current section id context
 * @return int Section ID
 */
function oa_core_get_section_context() {
  if (defined('OA_SESSION_SECTION') && isset($_SESSION[OA_SESSION_SECTION])) {
    return $_SESSION[OA_SESSION_SECTION];
  }
  else {
    return oa_section_get_section_context();
  }
}

/**
 * Get parent Spaces and Groups.
 *
 * @param int $nid
 *   The NID of the Space or Group to check.
 * @param string|NULL $bundle
 *   (optional) The node type (default: OA_SPACE_TYPE). If NULL is passed, it
 *   will include all node types.
 * @param int|NULL $status 
 *   (optional) If specified, the node status (ex. NODE_PUBLISHED or
 *   NODE_NOT_PUBLISHED) to look for. If not specified, it return 
 *   nodes of either status.
 * @param bool $include_archived
 *   (optional) Whether to include archived nodes or not. By default, archived
 *   items aren't included.
 *
 * @return array
 *   Array of parent NIDs.
 */
function oa_core_get_parents($nid, $bundle = OA_SPACE_TYPE, $status = NULL, $include_archived = FALSE, $account = NULL) {
  if (!isset($account)) {
    global $user;
    $uid = $user->uid;
  }
  elseif (is_numeric($account)) {
    $uid = $account;
  }
  else {
    $uid = $account->uid;
  }

  $cid = oa_core_get_cache_id(OA_CACHE_GET_PARENTS, $nid . '_' . $uid, $include_archived, array($bundle, $status));
  if (oa_core_get_cache(OA_CACHE_GET_PARENTS, $cid, $result)) {
    return $result;
  }

  $query = db_select('node', 'n');
  $query->leftJoin('og_membership', 'f', "n.nid = f.gid");
  if (isset($bundle)) {
    $query->condition('n.type', $bundle);
  }
  if (isset($status)) {
    $query->condition('n.status', $status);
  }
  $query
    ->fields('n', array('nid'))
    ->condition('f.etid', $nid)
    ->condition('f.entity_type', 'node')
    ->orderBy('n.title')
    ->addTag('node_access');

  if (module_exists('flag') && !$include_archived) {
    if ($flag = flag_get_flag('trash')) {
      $query->leftJoin('flag_content', 'a', "a.fid = :fid AND a.content_id = n.nid", array(':fid' => $flag->fid));
      // This makes sure that archived content isn't included, because 'uid'
      // will be NULL if the join didn't connect anything.
      $query->isNull('a.uid');
    }
  }

  $result = $query->execute()->fetchCol(0);

  oa_core_set_cache(OA_CACHE_GET_PARENTS, $cid, $result);

  return $result;
}

/**
 * Get child Spaces or Groups.
 *
 * @param int $nid
 *   The NID of the Space or Group to check.
 * @param string|NULL $bundle
 *   (optional) The node type (default: OA_SPACE_TYPE). If NULL is passed, it
 *   will include all node types.
 * @param int|NULL $status 
 *   (optional) If specified, the node status (ex. NODE_PUBLISHED or
 *   NODE_NOT_PUBLISHED) to look for. If not specified, it return 
 *   nodes of either status.
 * @param bool $include_archived
 *   (optional) Whether to include archived nodes or not. By default, archived
 *   items aren't included.
 *
 * @return array
 *   Array of children NIDs.
 */
function oa_core_get_groups_by_parent($nid, $bundle = OA_SPACE_TYPE, $status = NULL, $include_archived = FALSE, $account = NULL) {

  if ($nid == 0) {
    return oa_core_get_top_parents($bundle, $status, $include_archived, $account);
  }

  if (!isset($account)) {
    global $user;
    $uid = $user->uid;
  }
  elseif (is_numeric($account)) {
    $uid = $account;
  }
  else {
    $uid = $account->uid;
  }

  $cid = oa_core_get_cache_id(OA_CACHE_GROUPS_BY_PARENT, $nid . '_' . $uid, $include_archived, array($bundle, $status));
  if (oa_core_get_cache(OA_CACHE_GROUPS_BY_PARENT, $cid, $result)) {
    return $result;
  }

  $query = db_select('node', 'n');
  $query->leftJoin('og_membership', 'f', "n.nid = f.etid");
  $query
    ->fields('n', array('nid'))
    ->condition('f.gid', $nid)
    ->condition('f.entity_type', 'node')
    ->orderBy('n.title')
    ->addTag('node_access');

  if (isset($bundle)) {
    $query->condition('n.type', $bundle);
  }
  if (isset($status)) {
    $query->condition('n.status', $status);
  }

  if (module_exists('flag') && !$include_archived) {
    if ($flag = flag_get_flag('trash')) {
      $query->leftJoin('flag_content', 'a', "a.fid = :fid AND a.content_id = n.nid", array(':fid' => $flag->fid));
      // This makes sure that archived content isn't included, because 'uid'
      // will be NULL if the join didn't connect anything.
      $query->isNull('a.uid');
    }
  }

  $result = $query->execute()->fetchCol(0);

  oa_core_set_cache(OA_CACHE_GROUPS_BY_PARENT, $cid, $result);

  return $result;
}

/**
 * Get top-level spaces/groups (no parents of same bundle type)
 *
 * @param string $bundle
 *   The node type (default: OA_SPACE_TYPE).
 * @param int|NULL $status
 *   (optional) If specified, the node status (ex. NODE_PUBLISHED or
 *   NODE_NOT_PUBLISHED) to look for. If not specified, it return
 *   nodes of either status.
 * @param bool $include_archived
 *   (optional) Whether to include archived nodes or not. By default, archived
 *   items aren't included.
 *
 * @return array
 *   Array of children NIDs.
 */
function oa_core_get_top_parents($bundle, $status = NULL, $include_archived = FALSE, $account = NULL) {
  if (!isset($account)) {
    global $user;
    $uid = $user->uid;
  }
  elseif (is_numeric($account)) {
    $uid = $account;
  }
  else {
    $uid = $account->uid;
  }

  $cid = oa_core_get_cache_id(OA_CACHE_TOP_PARENTS, $uid, $include_archived, array($bundle, $status));
  if (oa_core_get_cache(OA_CACHE_TOP_PARENTS, $cid, $result)) {
    return $result;
  }

  // need to also add the spaces whose parents are not the correct bundle
  $query_parents = db_select('node', 'n');
  $query_parents->join('og_membership', 'f', "n.nid = f.etid");
  $query_parents->join('node', 'n2', "n2.nid = f.gid");
  $query_parents
    ->fields('n', array('nid'))
    ->condition('f.entity_type', 'node')
    ->condition('n.type', $bundle)
    ->condition('n2.type', $bundle);

  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
    ->orderBy('n.title')
    ->addTag('node_access')
    ->condition('n.type', $bundle)
    ->condition('n.nid', $query_parents, 'NOT IN');

  if (isset($status)) {
    $query->condition('n.status', $status);
  }

  if (module_exists('flag') && !$include_archived) {
    if ($flag = flag_get_flag('trash')) {
      $query->leftJoin('flag_content', 'a', "a.fid = :fid AND a.content_id = n.nid", array(':fid' => $flag->fid));
      // This makes sure that archived content isn't included, because 'uid'
      // will be NULL if the join didn't connect anything.
      $query->isNull('a.uid');
    }
  }

  $result = $query->execute()->fetchCol(0);

  oa_core_set_cache(OA_CACHE_TOP_PARENTS, $cid, $result);

  return $result;
}

/**
 * Get all the content within a particular Section.
 *
 * @param int $nid
 *   The node ID of the Section.
 *
 * @return array
 *   An array of node IDs.
 */
function oa_core_get_section_content($nid) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('status', 1)
    ->fieldCondition('oa_section_ref', 'target_id', $nid);
  $result = $query->execute();
  if (isset($result['node'])) {
    return array_keys($result['node']);
  }
  return array();
}

/**
 * Determine if a user is a member of a team
 * @param  int $team_id
 * @param  int $user_id
 * @return boolean TRUE if user is in team
 */
function oa_core_member_of_team($team_id, $user_id) {
  $cache = &drupal_static(__FUNCTION__);

  if (!isset($cache[$team_id][$user_id])) {
    $result = db_select('field_data_field_oa_team_users', 'f')
      ->fields('f', array('field_oa_team_users_target_id'))
      ->condition('field_oa_team_users_target_id', $user_id)
      ->condition('entity_type', 'node')
      ->condition('entity_id', $team_id)
      ->condition('deleted', 0)
      ->execute();
    if ($result->rowCount() > 0) {
      $access = TRUE;
    }
    else {
      // not explicitly in team, but check ownership of team node
      // do NOT use node_load as this is called from hook_node_grants()
      $result = db_select('node', 'n')
        ->fields('n', array('uid'))
        ->condition('nid', $team_id)
        ->execute()
        ->fetchAssoc();
      $access = ($result['uid'] == $user_id) ? TRUE : FALSE;
    }
    $cache[$team_id][$user_id] = $access;
  }

  return $cache[$team_id][$user_id];
}

/**
 * Returns TRUE if the section $node has open access to public
 */
function oa_core_section_is_public($node) {
  return (
       empty($node->field_oa_group_ref[LANGUAGE_NONE])
    && empty($node->field_oa_team_ref[LANGUAGE_NONE])
    && empty($node->field_oa_user_ref[LANGUAGE_NONE])
    );
}

/**
 * Returns a list of group-content types throughout the system. List
 *   leaves out content types excluded by other modules/apps.
 *
 * @return array of strings denoting content types marked for omission
 */
function oa_core_list_content_types($space_content = FALSE) {
  $nodes = node_type_get_types();
  if ($space_content) {
    // remove types that are not space content
    foreach ($nodes as $key => $node) {
      if (!og_is_group_content_type('node', $node->type)) {
        unset($nodes[$key]);
      }
    }
  }

  // Queries hook_oa_omit_content_types to determine what content types
  //   modules wants to hide.
  $deny = module_invoke_all('oa_omit_content_types');
  if (!empty($deny)) {
    foreach ($deny as $remove) {
      unset($nodes[$remove]);
    }
  }

  return $nodes;
}

/**
 * Create a new content node within a space/section
 * @param  string $bundle  name of node bundle to create
 * @param  object $context an optional code to copy space/section from
 *   if not specified, current Session space/section context is used
 * @return object $wrapper entity metadata wrapper around node
 *
 * NOTE: The created node is NOT SAVED.  You need to use:
 *   $wrapper = oa_core_create_node(...);
 *   $wrapper->save();
 * to actually save the created node.  This allows you to set other
 * wrapper fields before saving
 */
function oa_core_create_node($bundle, $title = '', $context = NULL) {
  global $user;

  $values = array(
    'type' => $bundle,
    'uid' => $user->uid,
    'status' => 1,
    'comment' => 0,
    'promote' => 0,
  );
  $entity = entity_create('node', $values);
  $wrapper = entity_metadata_wrapper('node', $entity);

  $wrapper->title = $title;

  $space_id = oa_core_get_space_context();
  $section_id = oa_core_get_section_context();
  if (isset($context)) {
    // copy space and section fields from context node
    $context_wrapper = entity_metadata_wrapper('node', $context);
    if (isset($context_wrapper->{OA_SPACE_FIELD})) {
      $space_id = $context_wrapper->{OA_SPACE_FIELD}->value();
      if (is_array($space_id)) {
        // if multi-value space field, just use first space for message
        $space_id = array_shift($space_id);
      }
    }
    if (isset($context_wrapper->{OA_SECTION_FIELD})) {
      $section_id = $context_wrapper->{OA_SECTION_FIELD}->value();
    }
  }
  if (isset($wrapper->{OA_SPACE_FIELD})) {
    $wrapper->{OA_SPACE_FIELD} = $space_id;
  }
  if (isset($wrapper->{OA_SECTION_FIELD})) {
    $wrapper->{OA_SECTION_FIELD} = $section_id;
  }

  return $wrapper;
}

/**
 * Helper function to retrieve an array of node titles and links given
 * a list of node ids
 * @param  array  $ids array of node ids to fetch
 * @param  string $type optional node type to filter
 * @param  array $fields a list of fields to fetch (link is a special fieldname)
 * @return array      associative array:
 *   'titles' is a list of node titles (clean)
 *   'links' is a list of node links
 *   'ids' is a list of the node ids
 */
function oa_core_get_titles($ids = array(), $type = '', $sort_field = 'title', $fields = array('title', 'link', 'id', 'type'), $sanitize = TRUE) {
  $query_fields = array('nid', 'title');
  $return = array();
  foreach ($fields as $field) {
    // for backwards compatibility the array keys of the $return are
    // ids, titles, links, types.  So we append an 's' to the field name
    $return[$field . 's'] = array();
    // the 'link' and 'id' field names are handled specially and are not
    // direct query field names
    if (!in_array($field, array('link', 'id')) && !in_array($field, $query_fields)) {
      $query_fields[] = $field;
    }
  }
  if (!empty($ids)) {
    $query = db_select('node', 'n');
    if (!empty($sort_field) && ($sort_field != 'title')) {
      $query->leftJoin('field_data_' . $sort_field, 's',
        "n.nid = s.entity_id AND s.entity_type = 'node'");
    }
    $query
      ->fields('n', $query_fields)
      ->condition('n.nid', $ids, 'IN');
    if ($sort_field == 'title') {
      $query->orderBy('title');
    }
    elseif (!empty($sort_field)) {
      $query->orderBy('s.' . $sort_field . '_value');
    }
    if (!empty($type)) {
      $query->condition('n.type', $type);
    }
    $result = $query->execute();
    while ($row = $result->fetchAssoc()) {
      foreach ($fields as $field) {
        $field_name = ($field == 'id') ? 'nid' : $field;
        $value = isset($row[$field_name]) ? $row[$field_name] : NULL;
        if (($field == 'title') && $sanitize) {
          $value = check_plain($value);
        }
        if ($field == 'link') {
          $value = l($row['title'], 'node/' . $row['nid']);
        }
        $return[$field . 's'][] = $value;
      }
    }
  }
  return $return;
}

/**
 * truncate a list to a given number of items with optional More link
 * @param  array $list      array to be truncated
 * @param  int $count     number of items desired
 * @param  string $more_link optional "More" link added to end of array
 * @param  boolean $always_link TRUE to always display more link
 * @return array            new list of items
 */
function oa_core_truncate_list($list, $count, $more_link = '', $always_link = FALSE) {
  $new_list = array_slice($list, 0, $count);
  if (!empty($more_link) && ($always_link ||(count($list) != count($new_list)))) {
    $new_list[] = $more_link;
  }
  return $new_list;
}

/**
 * Get a list of public spaces.
 *
 * Necessary since og_get_entity_groups() doesn't return anything for anonymous users
 *
 * @param array $group_types
 *   (optional) An associative array of node types.
 *   (default: array(OA_SPACE_TYPE => OA_SPACE_TYPE)
 * @param int $status 
 *   (optional) If specified, the node status (ex. NODE_PUBLISHED or
 *   NODE_NOT_PUBLISHED) to look for. If not specified, it return 
 *   nodes of either status.
 * @param bool $include_archived
 *   (optional) Whether to include archived nodes or not. By default, archived
 *   items aren't included.
 *
 * @return array
 *   An array of Space NIDs.
 */
function oa_core_get_public_spaces($group_types = array(OA_SPACE_TYPE => OA_SPACE_TYPE), $status = NULL, $include_archived = FALSE) {
  $cache = &drupal_static(__FUNCTION__);

  $group_types_cid = implode(',', $group_types);
  if (!isset($cache[$group_types_cid][$status][$include_archived])) {
    $query = db_select('node', 'n');
    $query->rightJoin('field_data_group_access', 'g', "n.nid = g.entity_id AND g.entity_type = 'node'");
    $query
      ->fields('n', array('nid'))
      ->condition('n.type', $group_types, 'IN')
      ->condition('g.group_access_value', 0);
    if (isset($status)) {
      $query->condition('n.status', $status);
    }
    if (module_exists('flag') && !$include_archived) {
      if ($flag = flag_get_flag('trash')) {
        $query->leftJoin('flag_content', 'a', "a.fid = :fid AND a.content_id = n.nid", array(':fid' => $flag->fid));
        // This makes sure that archived content isn't included, because 'uid'
        // will be NULL if the join didn't connect anything.
        $query->isNull('a.uid');
      }
    }

    $cache[$group_types_cid][$status][$include_archived] = $query->execute()->fetchCol(0);
  }

  return $cache[$group_types_cid][$status][$include_archived];
}

/**
 * Return a list of sections within a space
 * Uses access control, so only sections with access are returned
 * @param  int $gid space ID
 * @param  int $status NULL for any status, otherwise specify status to return
 * @param  bool $bypass_access_check, TRUE to bypass access control
 * @param  array $fields, array of additional fields to return, otherwise just title
 *   fields array has format fieldname|column.  e.g., field_oa_space|tid
 * @return array of section data: $array[$nid] = $title.  If $fields is specified
 *   the return array is the full associative array of nid, title, fields
 */
function oa_core_space_sections($gid, $status = NULL, $bypass_access_check = FALSE, $fields = array()) {
  $query = db_select('node', 'n');
  $query->rightJoin('og_membership', 'og', 'n.nid = og.etid');
  $query->leftJoin('field_data_field_oa_section_weight', 'w',
        "n.nid = w.entity_id AND w.entity_type = 'node'");
  $extra_fields = array();
  foreach ($fields as $field) {
    if ((strpos($field, 'field_') === 0) || (strpos($field, '|') !== FALSE)) {
      $field_list = explode('|', $field);
      $field_name = $field_list[0];
      $column = !empty($field_list[1]) ? $field_list[1] : 'value';
      $query->leftJoin('field_data_' . $field_name, $field_name,
        'n.nid = ' . $field_name . '.entity_id');
      $query->fields($field_name, array($field_name . '_' . $column));
    }
    else {
      $extra_fields[] = $field;
    }
  }
  if (isset($status)) {
    $query->condition('n.status', $status);
  }
  $query
    ->fields('n', array('nid', 'title') + $extra_fields)
    ->condition('n.type', OA_SECTION_TYPE)
    ->condition('og.entity_type', 'node')
    ->condition('og.field_name', OA_SPACE_FIELD)
    ->condition('og.gid', $gid)
    ->orderBy('w.field_oa_section_weight_value');
  if (!$bypass_access_check) {
    $query->addTag('node_access');
  }
  $result = $query->execute();
  if (empty($fields)) {
    return $result->fetchAllKeyed(0, 1);
  }
  else {
    return $result->fetchAllAssoc('nid');
  }
}

/**
 * Return a list of all Groups
 *
 * @return
 *    An array of Groups, keyed by the group nid.
 */
function oa_core_get_all_groups() {
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'))
      ->condition('n.type', OA_GROUP_TYPE)
      ->addTag('node_access');
  return $query->execute()->fetchAllAssoc('nid');
}

/**
 * Get the users that are in a space (excluding inherited users).
 *
 * @param int $space_id
 *   The NID of the Space.
 * @param int $state
 *   (Optional) The state of the OG membership, for example:
 *   - OG_STATE_ACTIVE (the default)
 *   - OG_STATE_PENDING
 *   - OG_STATE_BLOCKED
 *
 * @return array
 *   An associative array of fully loaded user objects, keyed by user id.
 */
function oa_core_get_users_for_space($space_id, $state = OG_STATE_ACTIVE) {
  $query = db_select('og_membership', 'og')
    ->fields('og', array('etid'))
    ->condition('og.entity_type', 'user')
    ->condition('og.state', $state)
    ->condition('og.group_type', 'node')
    ->condition('og.gid', $space_id);
  $uids = $query->execute()->fetchCol();
  return user_load_multiple($uids);
}

/**
 * Get the users that are in a space, including inherited users.
 *
 * @param int $space_id
 *   The NID of the Space.
 * @param int $state
 *   (Optional) The state of the OG membership, for example:
 *   - OG_STATE_ACTIVE (the default)
 *   - OG_STATE_PENDING
 *   - OG_STATE_BLOCKED
 *
 * @return array
 *   An associative array of fully loaded user objects, keyed by user id.
 */
function oa_core_get_inherited_users_for_space($space_id, $state = OG_STATE_ACTIVE) {
  $users = oa_core_get_users_for_space($space_id, $state);

  if (module_exists('og_subgroups') && function_exists('_og_subgroups_get_inherited_users')) {
    $inherited_users = _og_subgroups_get_inherited_users('node', $space_id);
    foreach ($inherited_users as $uid => $data) {
      foreach ($data as $item) {
        if ($item['membership']->state == $state) {
          $users[$uid] = $item['user'];
        }
      }
    }
  }

  return $users;
}

/**
 * Return the users that are the intersection of Group and Space membership.
 *
 * @param int $space_id
 *    The Space ID of the Open Atrium site
 * @param $group_id
 *    The Group ID
 * @return
 *    An array of Users keyed by uid
 */
function oa_core_get_group_users_for_space($space_id, $group_id) {
  $query = db_select('users', 'u');
  $query->innerJoin('og_membership', 'og1', 'u.uid = og1.etid');
  $query->innerJoin('og_membership', 'og2', 'u.uid = og2.etid');
  $query->fields('u', array('uid'))
      ->condition('og1.entity_type', 'user')
      ->condition('og1.gid', $space_id)
      ->condition('og1.group_type', 'node')
      ->condition('og2.entity_type', 'user')
      ->condition('og2.gid', $group_id)
      ->condition('og1.group_type', 'node');

  $results = $query->execute()->fetchAllAssoc('uid');
  return user_load_multiple(array_keys($results));
}

/**
 * Return a list of space ids that a user belongs to.
 *
 * @deprecated This function is redundant - use oa_core_get_groups_by_user().
 *
 * @see oa_core_get_groups_by_user()
 */
function oa_core_get_user_spaces($uid) {
  $groups = oa_core_get_groups_by_user(user_load($uid), 'node');
  return !empty($groups) ? $groups : array();
}

/**
 * Helper function to return the id of the space/group that contains the nid node
 * This function is called a lot, so it needs to be fast
 * Do not use node_load here!
 */
function oa_core_get_group_from_node($nid, $allowed_types = array(OA_SPACE_TYPE, OA_GROUP_TYPE)) {
  $cache = &drupal_static('oa_core_groups', array());
  if (isset($cache[$nid])) {
    return $cache[$nid];
  }

  $query = db_select('og_membership', 'f');
  $query->leftJoin('node', 'n', "n.nid = f.gid");
  $result = $query
    ->fields('f', array('gid'))
    ->condition('f.etid', $nid)
    ->condition('f.group_type', 'node')
    ->condition('f.field_name', OA_SPACE_FIELD)
    ->condition('n.type', $allowed_types, 'IN')
    ->execute()
    ->fetchAssoc();

  if (!empty($result)) {
    $cache[$nid] = $result['gid'];
  }
  else {
    $cache[$nid] = $nid;
  }
  return $cache[$nid];
}

/**
 * Sort function to sort users by name.
 */
function oa_core_sort_users_by_name($u1, $u2) {
  // Get last name for sorting.
  $name1 = !empty($u1->realname) ? oa_core_get_last_word($u1->realname) : $u1->name;
  $name2 = !empty($u2->realname) ? oa_core_get_last_word($u2->realname) : $u2->name;
  return strcasecmp($name1, $name2);
}

/**
 * Helper to return last word of a string
 */
function oa_core_get_last_word($string) {
  return ($pos =  strrpos($string, ' ')) ?  substr($string, $pos + 1) : $string;
}

/**
 * Return the name of a user
 */
function oa_core_realname($user) {
  return !empty($user->realname) ? $user->realname : $user->name;
}

/**
 * Convert known entities in to a simple array of title and picture.
 */
function oa_core_entity_build_display($entity, $id, $space) {
  if (!empty($entity->nid)) {
    if (node_access('view', $entity)) {
      $display['title'] = l($entity->title, 'node/' . $entity->nid);
    }
    else {
      $display['title'] = t('A @type', array('@type' => array('@type' => node_type_get_name($entity->type))));
    }
    $display['picture'] = '';
    $display['uid'] = 0;
    $display['options'] = array();
  }
  else {
    $display['title'] = l(format_username($entity), 'user/' . $entity->uid);
    $display['uid'] = $entity->uid;
    $display['picture'] = oa_users_picture($entity);
    $display['options'] = array(
      'attributes' => array(
        'class' => array('use-ajax'),
      ),
      'query' => drupal_get_destination() + array(
        'token' => drupal_get_token('node_' . $space->nid . '_' . $entity->uid),
      ),
    );
  }

  return $display;
}

/**
 * Return vocabularies assigned to a specific content type
 */
function oa_core_get_entity_vocabs($entity_type, $bundle) {
  $vocabs = array();
  $fields = field_info_instances($entity_type, $bundle);
  foreach ($fields as $field_name => $field) {
    $info = field_info_field($field_name);
    // handle normal taxonomy_term_reference fields
    if ($info['type'] == 'taxonomy_term_reference') {
      foreach ($info['settings']['allowed_values'] as $value) {
        if (!empty($value['vocabulary'])) {
          $vocabs[$value['vocabulary']] = $value['vocabulary'];
        }
      }
    }
    // also handle entityreference fields pointing to taxonomy
    elseif (($info['type'] == 'entityreference') && ($info['settings']['target_type'] == 'taxonomy_term')) {
      if (!empty($info['settings']['handler_settings']['target_bundles'])) {
        foreach ($info['settings']['handler_settings']['target_bundles'] as $value) {
          $vocabs[$value] = $value;
        }
      }
    }
  }
  return $vocabs;
}

/**
 * Returns the named vocabulary
 * Cannot use core taxonomy_vocabulary_machine_name_load because og_vocab
 * alters the query to only return vocabs associated with the current space
 * see issue https://drupal.org/node/2270529
 */
function oa_core_taxonomy_vocabulary($machine_name) {
  // EntityFieldQuery is not subject to the
  // og_vocab_query_taxonomy_vocabulary_load_multiple_alter() function
  $efq = new EntityFieldQuery();
  $result = $efq->entityCondition('entity_type', 'taxonomy_vocabulary')
    ->propertyCondition('machine_name', $machine_name)
    ->execute();
  return !empty($result['taxonomy_vocabulary']) ? current($result['taxonomy_vocabulary']) : NULL;
}

/**
 * Return terms for a list of vocabularies
 */
function oa_core_get_vocab_terms($vocabs) {
  $options = array();
  foreach ($vocabs as $vocab) {
    if ($vocabulary = oa_core_taxonomy_vocabulary($vocab)) {
      if ($terms = taxonomy_get_tree($vocabulary->vid)) {
        foreach ($terms as $term) {
          $options[$term->tid] = str_repeat('-', $term->depth) . $term->name;
        }
      }
    }
  }
  return $options;
}

/**
 * Returns the version of Bootstrap (via Radix) being used
 * Returns 2 or 3 for Bootstrap, returns 0 if no Bootstrap is used
 */
function oa_core_get_bootstrap_version() {
  static $radix_version = NULL;
  if (isset($radix_version)) {
    return $radix_version;
  }

  // set default to 3 so if using a git clone without version info
  // we assume it's the latest -dev version
  $radix_version = 3;
  // parse the Radix info file to determine version
  $path = drupal_get_path('theme', 'radix') . '/' . 'radix.info';
  $info = drupal_parse_info_file($path);
  if (empty($info)) {
    // no Radix theme found, so return zero.
    $radix_version = 0;
  }
  elseif (!empty($info['version']) && strpos($info['version'], '7.x-') === 0) {
    $radix_version = intval(substr($info['version'], 4, 1));
  }
  return $radix_version;
}

/**
 * Helper function to create a new Section or Space Type taxonomy term
 * @param string $vocab
 *   Machine name of vocabulary to add term to
 * @param string $name
 *   Human readable label of the term
 * @param array $params
 *   expected to have fields for:
 *   'taxonomy' - vocabulary machine name.
 *   'name' - The human readable label of the term.
 *   'description' - The human readable description of the term.
 *   'node_options' - An array of node types which should be allowed within the section.
 *   'layout' - The panelizer layout key to use for this section.
 *   'icon' - The icon class to use in the sitemap.
 * @param bool $update
 *   Whether an existing term is allowed to be updated.
 */
function oa_core_create_term($vocab_name, $name, $params, $update = TRUE) {
  $vocab = oa_core_taxonomy_vocabulary($vocab_name);
  $term = NULL;

  // This function can get called from install hooks.
  // Make sure the Taxonomy is available.
  if (!$vocab) {
    features_revert(array(
      'oa_core' => array('taxonomy'),
      'oa_sections' => array('taxonomy'),
    ));
    drupal_static('taxonomy_vocabulary_get_names');
    $vocab = oa_core_taxonomy_vocabulary($vocab_name);
  }

  if (!empty($vocab)) {
    $conditions = array(
      'name' => trim($name),
      'vid' => $vocab->vid,
    );
    $term = current( entity_load('taxonomy_term', array(), $conditions));

    if (!$term || $update) {

      // Make sure the fields are available.
      $field_info = field_info_instances('taxonomy_term', $vocab_name);
      $revert = array();
      if (empty($field_info['field_oa_node_types'])) {
        $revert['oa_buttons'] = array('field_base', 'field_instance');
      }
      if (empty($field_info['field_oa_section_layout'])) {
        $revert['oa_core'] = array('field_base', 'field_instance');
      }
      if (empty($field_info['field_oa_icon_class'])) {
        $revert['oa_sections'] = array('field_base', 'field_instance');
      }
      if (!empty($revert)) {
        features_revert($revert);
        field_info_cache_clear();
      }

      $description = $params['description'];
      $node_options = $params['node_options'];
      $layout = $params['layout'];
      $icon = !empty($params['icon']) ? $params['icon'] : '';

      if ($term && $update) {
        // Update existing term.
        if (isset($term->field_oa_icon_class)) {
          $term->field_oa_icon_class[LANGUAGE_NONE][0]['value'] = $icon;
        }
        $term->field_oa_section_layout[LANGUAGE_NONE][0]['value'] = $layout;
        $term->field_oa_node_types[LANGUAGE_NONE] = array();
      }
      else {
        // Create new term.
        $term = (object)array(
          'vid' => $vocab->vid,
          'name' => $name,
          'description' => $description,
          'format' => 'panopoly_wysiwyg_text',
          'field_oa_icon_class' => array(
            LANGUAGE_NONE => array(
              array('value' => $icon),
            ),
          ),
          'field_oa_section_layout' => array(
            LANGUAGE_NONE => array(
              array('value' => $layout),
            ),
          ),
          'field_oa_node_types' => array(
            LANGUAGE_NONE => array(),
          ),
          'path' => array(
            'alias' => '',
            'pathauto' => '',
          ),
          'oa_button' => TRUE,
        );
      }

      if (!empty($node_options)) {
        foreach ($node_options as $type) {
          $term->field_oa_node_types[LANGUAGE_NONE][] = array('value' => $type);
        }
      }
      taxonomy_term_save($term);
    }
  }
  return $term;
}
