<?php

/**
 * @file
 *   Form definitions and handlers for the og_drive module.
 */

/**
 * Group node drive settings form defintion.
 * Displays a form with which to store the google drive settings for a group.
 */
function og_drive_group_node_settings($form, $form_state, $node) {
  $form = array();
  // Get the account values associated with this group.
  $credentials = new OgDriveCredentials($node->nid);
  $fields = $credentials->getFormDefaults();
  // Some behavior depends on the group state relative to the Google drive account.
  $state = $credentials->getState();

  // Once all values have been assigned, disable the textfields and provide a reset link.
  if ($state > OG_DRIVE_STATE_UNREGISTERED) {
    $disabled = TRUE;
  }

  switch ($state) {
    // This is the state before any values are submited to the form.
    case OG_DRIVE_STATE_UNREGISTERED :
      $disabled = FALSE;
      $instructions_title = t('Get app credentials for this group');
      $instructions_text = t('In order to link this group to a Google drive, create a new Google account or log into an existing one and get the
        app credentials at !link.', array('!link' => l('https://code.google.com/apis/console', 'https://code.google.com/apis/console')));
      $form['og_drive_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
        '#weight' => 100,
      );
      break;
    // Values have been registered but the account app has not been manually authorized by user.
    case OG_DRIVE_STATE_REGISTERED :
      // Get an authorization link and prompt user to authorize the app.
      $client = new OgDriveClient($node->nid);
      $instructions_title = t('Authorize Google drive access');
      $instructions_text = t('Manually authorize the Og drive module to access the files in the Google drive account
        associated with this group. !link', array('!link' => l(t('Authorization link'), $client->getForceAuthUrl())));
      // Provide a link to delete the credentials.
      $form['og_drive_reset'] = array(
        '#type' => 'item',
        '#markup' => l('Reset group drive settings', 'og_drive_reset/settings/' . $node->nid),
        '#description' => t('Remove the Google drive credentials for this group.'),
        '#weight' => 100,
      );
      break;
    // The account app has been authorized and group members have access to the drive.
    case OG_DRIVE_STATE_AUTHORIZED :
      // Add a checkbox to ennable/disable the group access to the drive.
      if ($credentials->isEnabled()) {
        $status = t('Enabled'); 
        $status_description = t('Press to disable access to the group drive content page.');
        $status_action = t('Disable the group drive content page');
      }
      else {
        $status = t('Disabled'); 
        $status_description = t('Press to enable the group drive content page.');
        $status_action = t('Enable the group drive content page');
      }
      $status_description .= ' ' . t('Enabling or disabling access to the content page does not unshare files from the drive.');
      $form['drive_access_status'] = array(
        '#type' => 'fieldset',
        '#title' => t('Drive access status: !status', array('!status' => $status)),
        '#description' => $status_description,
        'save_status' => array(
          '#type' => 'submit',
          '#value' =>  $status_action,
          '#submit' => array('og_drive_save_status_change_submit'),
        ),
      );

      // Form elements to set wether the files display is generated by calling making a call to the drive API
      // or from the local file data.
      $form['drive_file_source'] = array(
        '#type' => 'fieldset',
        '#title' => t('Select drive file source'),
        '#description' => t('Select if the drive content uses the local database information to display file 
          links or makes an API call to Google.  For performance reasons, local information is prefered.'),
        'file_source' => array(
          '#type' => 'radios',
          '#options' => array(
            '0' => t('Use local info'),
            '1' => t('Make API call each time'),
          ),
          '#default_value' => $fields['file_source'],
        ),
        'save_file_source' => array(
          '#type' => 'submit',
          '#value' =>  t('Save file source'),
          '#submit' => array('og_drive_save_file_source_change_submit'),
        ),
      );

      // Form elements to set the access permissions to the drive for group members.
      $form['drive_permissions'] = array(
        '#type' => 'fieldset',
        '#title' => t('Drive access permission'),
        '#description' => t('Choose the drive access permissions for the group members.'),
        'drive_permission_rw' => array(
          '#type' => 'radios',
          '#title' => t('Viewing and editing'),
          '#default_value' => $fields['drive_permission_rw'], 
          '#options' => array(0 => t('Read only'), 1 => t('Read and edit')),
          '#description' => t('Decide if group members only have read access to shared files or if they 
            should be able to edit them.'),
        ),
        'drive_permission_submit' => array(
          '#type' => 'submit',
          '#value' => t('Change permission'),
          '#submit' => array('og_drive_change_permission_submit'),
        ),
      );
      // Provide a link to delete the drive and all file permissions.
      $form['og_drive_delete'] = array(
        '#type' => 'item',
        '#markup' => l('Delete group drive and shared permissions', 'og_drive_delete/' . $node->nid),
        '#description' => t('Delete the Google drive and unshare all files for this group.'),
        '#weight' => 100,
      );

      $instructions_title = t('The group drive is authorized');
      $instructions_text = t('Members of this group will now have access to the Google account drive documents.');
      break;
    case OG_DRIVE_STATE_UNKNOWN :
      $instructions_title = t('There is a problem with the group credentials.');
      $instructions_text = t('The authorization process has failed.  You may need to reset the group credentials.');
      break;
  }

  $instructions_text .= '<br>' . t('For detailed instructions, visit the Og drive !help.', array('!help' =>l(t('help page'), 'admin/help/og_drive')));
  array_push($form, array(
    'og_dive_state' => array(
      '#type' => 'fieldset',
      '#title' => t('OG drive group status'),
      'og_drive_instructions' => array(
        '#type' => 'item',
        '#title' => $instructions_title,
        '#markup' => $instructions_text, 
      ),
    ),
    'client_id' => array(
      '#type' => 'textfield',
      '#title' => t("App Client ID"),
      '#required' => TRUE,
      '#disabled' => $disabled,
      '#default_value' => $fields['client_id'] ? $fields['client_id'] : '',
      '#description' => t('Copy this value from the Google API console.'),
    ),
    'client_secret' => array(
      '#type' => 'textfield',
      '#title' => t("App Client Secret"),
      '#required' => TRUE,
      '#disabled' => $disabled,
      '#default_value' => $fields['client_secret'] ? $fields['client_secret'] : '',
      '#description' => t('Copy this value from the Google API console.'),
    ),
    'account_email' => array(
      '#type' => 'textfield',
      '#title' => t("Google account email"),
      '#disabled' => $disabled,
      '#default_value' => $fields['account_email'] ? $fields['account_email'] : '',
      '#description' => t('If desired, store the Google account login associated with this group.'),
    ),
    'node' => array(
      '#type' => 'value',
      '#value' => $node,
    ),
  ));
  return $form;
}

/**
 * Form sumbit.
 * Extract the credential field values from  $form_state and save.
 */
function og_drive_group_node_settings_submit($form, &$form_state) {
  // Get the form value elements that correspond to an og_drive_group_settings table field.
  $schema = drupal_get_schema('og_drive_group_settings');
  $fields = array_intersect_key($form_state['values'], $schema['fields']);
  // Store the data.
  $credentials = new OgDriveCredentials($form_state['values']['node']->nid, $fields);
  $credentials->save();
  drupal_set_message(t('The Google drive credentials for this group have been saved.')); 
}

/**
 * Confirm form definition to delete all Google drive credential values associated with a group.
 */
function og_drive_group_reset($form, &$form_state, $nid) {
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $nid,
  );
  $question = t('Are you sure you want to reset the Google app values for this group?');
  $description = t('This will delete the credentials stored for this group.  See the !help page for more information.', array('!help' => l('help', 'admin/help/og_drive')));
  $description .= ' ' . t('This action cannot be undone.');
  return confirm_form($form, $question, 'node/' . $nid . '/og-drive-settings', $description, t('Reset'), t("Don't reset"));
}

/**
 * Submit handler.
 * Delete drive credentials.
 */
function og_drive_group_reset_submit($form, &$form_state) {
  $nid = $form_state['values']['nid'];
  $form_state['redirect'] = 'node/' . $nid . '/og-drive-settings';
  $credManager = new OgDriveCredentials($nid);
  $credManager->delete();
  drupal_set_message(t('The Google drive credentials for this group have been deleted.')); 
}

/**
 * Submit handler for Enabled status change.
 */
function og_drive_save_status_change_submit($form, &$form_state) {
  $credentials = new OgDriveCredentials($form_state['values']['node']->nid);
  $enabled = $credentials->toggleEnabled(); 
  $enabled = $enabled ? t('enabled') : t('disabled');
  drupal_set_message(t('Status has been changed to !status', array('!status' => $enabled)));
}

/**
 * Submit handler for the permission form elements.
 */
function og_drive_change_permission_submit($form, &$form_state) {
  $new_perm = $form_state['values']['drive_permission_rw'];
  $nid = $form_state['values']['node']->nid;
  $credentials = new OgDriveCredentials($nid);
  if ($credentials->getDrivePermissionRW() != $new_perm) {
    $credentials->setDrivePermissionRW($new_perm);
    $credentials->save();
  }
  og_drive_update_role($nid, $credentials->getRoleString());
}

/**
 * Submit handler to set the file source.
 */
function og_drive_save_file_source_change_submit($form, &$form_state) {
  $source = $form_state['values']['file_source'];
  $creds = new OgDriveCredentials($form_state['values']['node']->nid);
  $creds->setFileSource($source);
  $creds->save();
  $t_param = array('!source' => $source == 0 ? t('local info') : t('API call'));
  drupal_set_message(t('The file source has been set to !source', $t_param));
}

/**
 * Form definition to register or update the group member's user account.
 * @param $user
 *   The Drupal user object.
 * @param $gid
 *   If provided, share only with the identified group.
 *   Otherwise share with all group the user is a member of.
 */
function og_drive_register_email($form, $form_state, $user, $gid = FALSE) {
  // If the email address is set, provide it as a default value and disable the field.
  $email_address = og_drive_get_user_email($user->uid);
  $form = array(
    'email_address' => array(
      '#type' => 'textfield',
      '#title' => t('Your Google account email address'),
      '#required' => TRUE,
      '#default_value' => $email_address,
      '#disabled' => $email_address !== FALSE,
      '#element_validate' => array('valid_email_address'),
      '#description' => t('Register the email address for the Google account with which you want the group 
        files to be shared.  This will be the same account for all the group drives on this site.  Take care to provide a valid google account
      	email which you can access because you might not have an easy opportunity to change this value.'),
    ),
    'uid' => array(
      '#type' => 'value',
      '#value' => $user->uid,
    ),
    'gid' => array(
      '#type' => 'value',
      '#value' => $gid,
    ),
  );
  if (!$email_address !== FALSE) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Register'),
    );
  }
    // Provide a link to a confirm form to delete the email address.
  else {
    // Test the permissions.  User is allowed to change the email value.
    
    if (
      (user_access('change own drive account email address')) ||
      (user_access('administer users') && user_access('administer group drive settings'))
    ) {
      $form['delete_link'] = array(
        '#type' => 'link',
        '#title' => t('Disable this drive account'),
        '#href' => 'og-drive/confirm-disable-account/' . $user->uid,
      );
    }
    // User is not allowed to change the email value.
    else {
      $form['contact_admin'] = array(
        '#markup' => t('This value can only be changed by the site administrator'),
      );
    }
  }
  return $form; 
}

/**
 * Submit handler.
 * Register the email address and share drive files.
 */
function og_drive_register_email_submit($form, &$form_state) {
  $uid = $form_state['values']['uid'];
  $email_address = $form_state['values']['email_address']; 
  $gid = $form_state['values']['gid'];
  og_drive_update_drive_email($uid, $email_address);
  // Share for one specific group.
  if ($gid !== FALSE) {
    og_drive_share_all_files($uid, $gid);
  }
  else {
    // Share the drive files with the new value.
    og_drive_share_all_groups_files($uid);
  }
  drupal_set_message(t('Your email address @email_address has been registered.
    Google drive documents from your groups will be shared to that account.', array('@email_address' => $email_address)));
}

/**
 * Confirm form.
 * Delete a drive account email.
 */
function og_drive_disable_account($form, $form_state, $account) {
  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $account->uid,
  );
  $question = t('Are you sure you want to delete the Google drive email associated with this account?');
  $description = t('This will unshare all drive files from the account.');
  $description .= ' ' . t('This action cannot be undone.');
  return confirm_form($form, $question, 'user/' . $account->uid . '/og-drive-settings', $description, t('Disable'), t("Don't disable"));
}

/**
 * Submit handler.
 * Delete drive account.
 */
function og_drive_disable_account_submit($form, &$form_state) {
  $form_state['redirect'] = 'user/' . $form_state['values']['uid'] . '/og-drive-settings';
  og_drive_delete_drive_email($form_state['values']['uid']);
}

/**
 * Confirm form to delete a group drive and all permissions associated with a group.
 */
function og_drive_group_delete($form, &$form_state, $nid) {
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $nid,
  );
  $question = t('Are you sure you want to delete the Google app values for this group?');
  $description = t('The group members will not have access to the drive documents anymore.  If you want to make it accessible again, you might need to disconect it from the account.  See the !help page for more information.', array('!help' => l('help', 'admin/help/og_drive')));
  $description .= ' ' . t('This action cannot be undone.');
  return confirm_form($form, $question, 'node/' . $nid . '/og-drive-settings', $description, t('Delete'), t("Don't delete"));
}

/**
 * Submit handler.
 * Delete the drive.
 */
function og_drive_group_delete_submit($form, &$form_state) {
  $nid = $form_state['values']['nid'];
  og_drive_delete_drive($nid);
  $form_state['redirect'] = 'node/' . $nid . '/og-drive-settings';
  drupal_set_message(t('The Google drive and all file permissions for group members of this group have been deleted.')); 
}

/**
 * Form definition.
 * Synchronize the local file data with the Google drive for one group.
 * Share new files and purge stale local data.
 */
function og_drive_synchronize_files_form($form, $form_state, $gid) {
  $form = array(
    'gid' => array(
      '#type' => 'value',
      '#value' => $gid,
    ),
    'set' => array(
      '#type' => 'fieldset',
      '#title' => t('Synchronize local files with drive'),
      '#description' => t('This will compare the local information for the drive files with the actual files
        on the drive.  Any new files will be shared and stale file information will be deleted.'),
      'submit' => array(
        '#type' => 'submit',
        '#value' => t('Synchronize'),
      ),
    ),
  );
  return $form;
}

/**
 * Submit handler.
 * Synchronize the local file data with the Google drive for one group.
 */
function og_drive_synchronize_files_form_submit($form, &$form_state) {
  og_drive_synchronize_files($form_state['values']['gid']);
}

/**
 * Form definition.  Create new drive file.
 */
function og_drive_create_new_drive_file($form, $state, $gid) {
  $mimeTypes = array(
    'application/vnd.google-apps.document' => 'Document',
    'application/vnd.google-apps.spreadsheet' => 'Spreadsheet',
    'application/vnd.google-apps.drawing' => 'Drawing',
    'application/vnd.google-apps.presentation' => 'Presentation',
    'application/vnd.google-apps.form' => 'Form',
  );
  $form = array(
    'gid' => array(
      '#type' => 'value',
      '#value' => $gid,
    ),
    'fieldset' => array(
      '#type' => 'fieldset',
      '#title' => t('Create new drive file'),
      '#description' => t('Create a new empty file in the group Google drive that will be shared with all group members.'),
      'title' => array(
        '#type' => 'textfield', 
        '#title' => t('The title of the new file'),
      ),
      'mimeType' => array(
        '#type' => 'select',
        '#title' => t('File type'),
        '#options' => $mimeTypes,
      ),
      'submit' => array(
        '#type' => 'submit',
        '#value' => t('Create file'),
      ),
    ),
  );
  return $form;
}

/**
 * Submit handler.  Create a new drive file.
 */
function og_drive_create_new_drive_file_submit($form, &$form_state) {
  $values = $form_state['values'];
  og_drive_create_new_file($values['gid'], $values['title'], $values['mimeType']);
}

/**
 * Form definition for file upload.
 */
function og_drive_upload_drive_file($form, $form_state, $gid) {
  $form = array(
    'gid' => array(
      '#type' => 'value',
      '#value' => $gid,
    ),
    'fieldset' => array(
      '#type' => 'fieldset',
      '#title' => t('Upload a file to the group drive'),
      'file' => array(
        '#name' => 'file',
        '#title' => t('Upload file'),
        '#type' => 'file',
      ),
      'submit' => array(
        '#type' => 'submit',
        '#value' => t('Upload'),
      ),
    ),
  );
  return $form;
}

/**
 * Validation handler.
 * This does not yet perform any validation.
 */
function og_drive_upload_drive_file_validate($form, &$form_state) {
/*
  // Get the file mime type.
  $filename = $_FILES['file']['tmp_name'];
  if (function_exists('finfo_open')) { 
    $finfo = finfo_open(FILEINFO_MIME); 
    $mimeType = finfo_file($finfo, $filename); 
  }
  elseif (function_exists('mime_content_type')){ 
    $mimeType = mime_content_type($filename); 
  } 
  else { 
    $mimeType = FALSE; 
  }

  if ($mimeType) { 
    $mimeType = strstr($mimeType, ';', TRUE);
    $form_state['values']['mimeType'] = $mimeType; 
  }
  else {
    form_set_error('fieldset', t('Unsuported mime type'));
  }
*/
}

/**
 * Submit handler.
 * Save file info, create and share drive file.
 */
function og_drive_upload_drive_file_submit($form, &$form_state) {
  $values = $form_state['values'];
  $data = file_get_contents($_FILES['file']['tmp_name']);
  $mimeType = $values['mimeType']; 
  og_drive_create_new_file($values['gid'], $_FILES['file']['name'], $mimeType, $data);
}

/**
 * Confirm form definition.
 * Delete a drive file.
 */
function og_drive_delete_file_confirm($form, $form_state, $nid, $fid) {
  $form['fid'] = array(
    '#type' => 'value',
    '#value' => $fid,
  );
  $form['gid'] = array(
    '#type' => 'value',
    '#value' => $nid,
  );
  $question = t('Are you sure you want to delete this drive file?');
  $description = t('The file will be trashed and unshared, removed from the Google drive and no longer available to the group members.');
  $description .= ' ' . t('This action cannot be undone.');
  return confirm_form($form, $question, 'node/' . $nid . '/og-drive-content', $description, t('Delete'), t("Don't delete"));
}

/**
 * Submit handler.  Delete file from drive.
 */
function og_drive_delete_file_confirm_submit($form, &$form_state) {
  $form_state['redirect'] = 'node/' . $form_state['values']['gid'] . '/og-drive-content';
  og_drive_delete_drive_file($form_state['values']['gid'], $form_state['values']['fid']);
}
