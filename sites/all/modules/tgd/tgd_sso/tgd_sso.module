<?php
/**
 * @file
 * TGD SSO Client module.
 *
 * Implementation notes
 * - TGD - SSO - Use Cases and Implementation Proposal
 *   https://docs.google.com/a/reyero.net/document/d/1eK_2apqFkPOPsIkQmuGISMAs8SQca1mrmL4GL0uTsVs/edit#
 */

use Drupal\tgd_sso\TGDClient;
use Drupal\tgd_sso\TGDUser;
use Drupal\tgd_sso\TGDUserManager;
use Drupal\tgd_sso\TGDLogger;

/**
 * Define some end point paths
 */
define('TGD_SSO_PATH_LOGIN', 'sign-in');
define('TGD_SSO_PATH_LOGOUT', 'user/logout');

/**
 * Implements hook_init().
 */
function tgd_sso_init() {
  global $user;

  // Skip if remote login not enabled, or we are in some user paths.
  if (!variable_get('tgd_sso_remote_enable') || drupal_is_cli() || $_GET['q'] == 'user/logout' || $_GET['q'] == 'user/login') {
    return;
  }

  // Check if logged in with special user accounts first.
  if ($user->uid && user_access('tgd sso local login')) {
    // Ok, admin user logged in, move on...
    $status = TRUE;
  }
  elseif ($tgdUser = tgd_sso_check_current_session()) {
    // First go for seamless authentication.
    // Ok, we've got a TGD user, check against current drupal user
    // and log in if needed.
    $status = $tgdUser->canLogin() && tgd_sso_check_current_user($tgdUser);
  }
  elseif ($user->uid) {
    // No user logged in, log out current user if any.
    $status = FALSE;
  }
  else {
    // Anonymous user, no remote session.
    $status = TRUE;
  }

  // Something went wrong, log out current user if any
  if (!$status && $user->uid) {
    tgd_sso_do_terminate_session();
    drupal_goto();
  }
}

/**
 * Implements hook_menu().
 */
function tgd_sso_menu() {
  // Admin pages
  $items['admin/config/tgd/sso'] = array(
    'title' => 'SSO Client',
    'description' => 'Configure Single Sign On client',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('variable_group_form', 'tgd_sso'),
    'access arguments' => array('administer site configuration'),
    'weight' => -1,
  );
  $items['admin/people/tgd_sso'] = array(
    'title' => 'TGD SSO',
    'description' => 'Administer TGD SSO',
    'page callback' => 'tgd_sso_admin_page_users',
    'access arguments' => array('administer users'),
    'file' => 'tgd_sso.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  $items['admin/people/tgd_sso/overview'] = array(
    'title' => 'User mappings',
    'description' => 'View TGD SSO user mappings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/people/tgd_sso/operations'] = array(
    'title' => 'Bulk update',
    'description' => 'Import and update users from master system',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tgd_sso_admin_users_bulk_form'),
    'access arguments' => array('administer users'),
    'file' => 'tgd_sso.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function tgd_sso_menu_alter(&$items) {
  // Replace all Drupal user pages
  module_load_include('inc', 'tgd_sso', 'tgd_sso.pages');
  _tgd_sso_menu_alter($items);
}

/**
 * Implements hook_permission().
 */
function tgd_sso_permission() {
  $permissions = array(
    'tgd sso local login' => array(
      'title' => t('Login with local user account'),
      'description' => t('Allows logging in with local user accounts, without using SSO system.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}

/**
 * Implements hook_user_load().
 */
function tgd_sso_user_load($users) {
  TGDUserManager::loadMultipleUsers($users);
}

/**
 * Implements hook_user_delete().
 */
function tgd_sso_user_update(&$edit, $account, $category) {
  if (variable_get('tgd_sso_local_enable')) {
    //TGDUserManager::updateUserMapping($account);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tgd_sso_form_user_login_alter(&$form, &$form_state, $form_id) {
  if (variable_get('tgd_sso_remote_enable')) {
    // We don't want destination to be 'user/login'.
    $destination = isset($_GET['destination']) ? NULL : '';
    $form += tgd_sso_build_link('login',  t('Start session'), $destination);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tgd_sso_form_user_login_block_alter(&$form, $form_state, $form_id) {
  // This will run on pages that display the login block but are not the login page.
  if (variable_get('tgd_sso_local_disable')) {
    // Disable login, password and submit button.
    $form['name']['#access'] = FALSE;
    $form['pass']['#access'] = FALSE;
    $form['actions']['#access'] = FALSE;
    $form['links']['#access'] = FALSE;
  }
  // Add remote log-in link
  tgd_sso_form_user_login_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tgd_sso_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // Only change if we don't allow local login.
  if ($form['#user_category'] == 'account') {
    $account = $form['#user'];
    // The account settings move around in this form.
    if (isset($form['account'])) {
      $account_form = &$form['account'];
    }
    else {
      $account_form = &$form;
    }

    $admin = user_access('administer users');

    if (variable_get('tgd_sso_remote_enable') && $admin) {
      $form['tgd_sso'] = array(
        '#type' => 'fieldset',
        '#title' => t('TGD SSO Account Information'),
        '#weight' => -10,
        '#description' => t('This account is managed by the SSO system'),
        '#collapsible' => TRUE,
        '#collapsed' => !$admin, // Collapse for admins, they get to see more data...
      );
      // For admins only, display remote account data.
      if ($tgdUser = TGDUserManager::getRemoteUser($account)) {
        if ($loaded = $tgdUser->load()) {
          $status = TGDUserManager::checkDrupalUser($account, $tgdUser);
        }
        $form['tgd_sso']['account'] = TGDUserManager::buildRemoteUser($tgdUser);
        if ($user->uid == $account->uid) {
          $form['tgd_sso'] += tgd_sso_build_link('edit', t('Edit account'));
        }
      }
      // Overall status.
      if (!$tgdUser) {
        $status_text = t('No remote account found.');
      }
      elseif (!$loaded) {
        $status_text = t('Cannot load remote account');
      }
      elseif (!$status) {
        $status_text = t('Account is not up to date');
      }
      elseif (!$tgdUser->canLogin()) {
        $status_text = t('Account is blocked, cannot login');
      }
      else {
        $status_text = t('Account is up to date and can login remotely');
      }
      $form['tgd_sso']['message'] = array(
        '#type' => 'item',
        '#title' => t('Sync status'),
        '#markup' => $status_text,
      );
    }

    if (variable_get('tgd_sso_local_disable') && !$admin) {
      // This account cannot login locally, hide / disable fields depending on viewer.
      $account_form['pass']['#access'] = FALSE;
      $account_form['current_pass_required_values']['#access'] = FALSE;
      $account_form['mail']['#access'] = FALSE;
      $account_form['name']['#access'] = FALSE;
    }
  }

}

/**
 * Implements hook_user_delete().
 */
function tgd_sso_user_delete($account) {
  TGDUserManager::deleteUserMapping($account);
}

/**
 * Get Client object.
 *
 * Client is statically cached so it can be reused withing the same request.
 *
 * @return \Drupal\tgd_sso\TGDClient
 */
function tgd_sso_client() {
  static $client;

  if (!isset($client)) {
    // First get HttpClient and params.
    // @todo Check we've got all this, error if not.
    $httpClient = http_client();
    $baseUrl = variable_get_value('tgd_sso_base_url');
    $authToken = variable_get_value('tgd_sso_auth_token');
    $logger = new TGDLogger(array(
      'debug' => variable_get('tgd_sso_debug_enable'),
      'callback' => 'tgd_sso_log_callback',
    ));
    $client = new TGDClient($baseUrl, $authToken, $httpClient, $logger);
  }

  return $client;
}


/**
 * Check whether user is logged into Webapp
 *
 * - Use shared cookie
 *
 * @return TGDUser|NULL
 *   TGDUser with login data only.
 */
function tgd_sso_check_current_session() {
  // Check shared cookie.
  $cookie_name = variable_get('tgd_sso_shared_cookie', 'PHPSESSID');
  if (isset($_COOKIE[$cookie_name])) {
    return tgd_sso_client()->getUserByToken($_COOKIE[$cookie_name]);
  }
}

/**
 * Check TGD user against current Drupal user
 *
 * @param Drupal\tgd_sso\TGDUser $user
 *   Remote user
 */
function tgd_sso_check_current_user($tgdUser) {
  global $user;

  // Get / create Drupal user for remote user.
  $account = TGDUserManager::getDrupalUser($tgdUser, variable_get('tgd_sso_local_create', FALSE));

  if (!$account || !$account->status) {
    // No matching local account found or account disabled.
    return FALSE;
  }
  elseif ($user->uid) {
    // User logged in, check it matches an is up to date.
    if ($user->uid != $account->uid) {
      tgd_sso_log('Current logged in user !drupal-user not matching master user: @tgd-user', $account, $tgdUser);
      // Start new session anyway.
      tgd_sso_do_start_session($account);
      return TRUE;
    }
    elseif (TGDUserManager::checkDrupalUser($account, $tgdUser))  {
      tgd_sso_log('User authenticated remotely !drupal-user, @tgd-user', $account, $tgdUser);
      return TRUE;
    }
    else {
      tgd_sso_log_error('Remote account authentication failed. Cannot login as @tgd-user.', NULL, $tgdUser);
      return FALSE;
    }
  }
  else {
    // User not logged in. Do user log-in
    if ($account && TGDUserManager::checkDrupalUser($account, $tgdUser)) {
      tgd_sso_log('Logging in remote user @tgd-user as Drupal user !drupal-user', $account, $tgdUser);
      tgd_sso_do_start_session($account);
      return TRUE;
    }
    else {
      tgd_log_error('Cannot login with user !drupal-user, from remote: @tgd-user', $account, $tgdUser);
      return FALSE;
    }
  }
}

/**
 * Start session as new user.
 */
function tgd_sso_do_start_session($account) {
  global $user;

  // WARNING: We are setting here global user object.
  $user = $account;
  user_login_finalize();

  drupal_set_message(t('Session started as !drupal-user', array(
    '!drupal-user' => theme('username', array('account' => $account)),
  )));
}

/**
 * Terminate user session.
 */
function tgd_sso_do_terminate_session($account) {
  global $user;

  $variables['%name'] = $user->name;

  watchdog('user', 'Session closed for %name.', $variables);
  module_invoke_all('user_logout', $user);

  // Destroy the current session, and reset $user to the anonymous user.
  session_destroy();

  drupal_set_message(t('Session closed for %name', $variables));
}

/**
 * Build page link as renderable array.
 */
function tgd_sso_build_link($type, $text, $destination = NULL) {
  $link = tgd_sso_master_link($type, $text, $destination);
  $build['sso_link'] = array(
    '#theme' => 'link',
    '#text' => $link['text'],
    '#path' => $link['path'],
    '#options' => $link['options'],
    '#weight' => 200,
  );
  return $build;
}

/**
 * Produce links to send user to master server.
 *
 * @param string $type
 *   'login' | 'logout' | 'edit'
 *
 * @param string $text
 *   Link text
 * @param $destination
 *   Optional destination path
 *
 * @return array
 *   Link array with 'text', 'path', 'options'.
 *   It can be rendered with theme('link', $link)
 */
function tgd_sso_master_link($type, $text = NULL, $destination = NULL) {
  $link = array(
    'text' => $text,
    'path' => '',
    'options' => array(),
  );
  $link['options'] = array(
    'external' => TRUE,
    'absolute' => TRUE,
    //'base_url' => variable_get_value('tgd_sso_base_url'),
    'html' => FALSE,
  );
  $link['options']['attributes']['class'] = array('tgd-sso-link', 'tgd-sso-' . $type);

  // Compute return url.
  $next_options = array('absolute' => TRUE);
  if (isset($destination)) {
    $next = $destination;
  }
  elseif (isset($_GET['destination'])) {
    $next = $_GET['destination'];
  }
  else {
  	$next = $_GET['q'];

  }
  // For log-in links, add timestamp token for the page to get refreshed after login.
  if ($type == 'login') {
  	$next_options['query']['sso-login'] = REQUEST_TIME;
  }

  // Now, depending on type.
  $path = '';
  switch ($type) {
    case 'login':
      $path = 'sign-in';
      break;
    case 'logout':
      $path = 'user/logout';
      break;
    case 'register':
      $path = 'apply';
      break;
    case 'view':
    case 'password':
    case 'edit':
    case 'cancel':
      $path = 'membership';
      break;
  }
  $link['path'] = variable_get_value('tgd_sso_base_url') . '/' . $path;
  // Url-encoding will be done automatically.
  $link['options']['query']['next'] = url($next, $next_options);

  return $link;
}

/**
 * Redirect to link with proper destination.
 *
 * @param $link
 *   Our link array.
 */
function tgd_sso_master_redirect($link) {
  // We are doing a 302 redirect, right?
  $http_response_code = 302;
  // @DEBUG:
  watchdog('tgd_sso', 'Redirecting user to master server: @url', array(
    '@url' => url($link['path'], $link['options'])
  ));
  // Destination in query string may override our goto destination.
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  // Not using drupal_goto, we have a safer version.
  //drupal_goto($link['path'], $link['options']);

  $url = url($link['path'], $link['options']);

  header('Location: ' . $url, TRUE, $http_response_code);

  // The "Location" header sends a redirect status code to the HTTP daemon. In
  // some cases this can be wrong, so we make sure none of the code below the
  // drupal_goto() call gets executed upon redirection.
  drupal_exit($url);
}

/**
 * Logging callback.
 */
function tgd_sso_log_callback($message, $args, $args_string, $severity, $print = TRUE) {
  switch ($severity) {
    case TGDLogger::ERROR:
      $level = WATCHDOG_ERROR;
      $type = 'error';
      break;
    case TGDLogger::WARNING:
      $level = WATCHDOG_WARNING;
      $type = 'warning';
      break;
    default:
      $level = WATCHDOG_NOTICE;
      $type = 'status';
      break;
  }
  // Watchdog all.
  watchdog('tgd_sso', $message . ($args ? '[' . $args_string . ']' : ''), array(), $level);
  // Print only if debug mode and devel enabled.
  if ($print && function_exists('dpm') && variable_get('tgd_sso_debug_enable')) {
    dpm($args, $message);
  }
}

/**
 * Log messages to user watchdog, display important ones.
 */
function tgd_sso_log($message, $drupalUser = NULL, $tgdUser = NULL, $level = WATCHDOG_INFO) {
  $debug = variable_get('tgd_sso_debug_enable');
  $variables = array();
  if ($drupalUser) {
    $variables['!drupal-user'] = theme('username', array('account' => $drupalUser));
  }
  if ($tgdUser) {
    $variables['@tgd-user'] = $debug ? (string)$tgdUser : $tgdUser->getLabel();
  }

  watchdog('tgd_sso', $message, $variables, $level);

  // Only user level messages if in debug mode.
  if ($debug && $level >= WATCHDOG_WARNING) {
    drupal_set_message('SSO DEBUG: ' . format_string($message, $variables), 'warning');
  }
}

/**
 * Error logging function.
 */
function tgd_sso_log_error($message, $drupalUser = NULL, $tgdUser = NULL) {
  tgd_sso_log($message, $drupalUser = NULL, $tgdUser = NULL, WATCHDOG_ERROR);
}

/**
 * Implements hook_cron().
 */
function tgd_sso_cron() {
  // @todo Make this configurable. Default is check one user every hour.
  if (($interval = variable_get_value('tgd_sso_check_interval')) && REQUEST_TIME - variable_get('tgd_sso_check_last_time', 0) > $interval) {
    tgd_sso_check_user_list(variable_get_value('tgd_sso_check_number'));
  }
}

/**
 * Periodically check user status, find deleted ones, clean up.
 *
 * @param $number
 *   Number of users to check.
 */
function tgd_sso_check_user_list($number = 1) {
  // Select users that didn't access the site for the last hour
  $query = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('u.uid', variable_get('tgd_sso_check_last_uid', 0), '>')
    ->condition('u.access', REQUEST_TIME - 3600, '<')
    ->orderBy('u.uid')
    ->range(0, $number);

  $check_list = $query->execute()->fetchCol();
  foreach ($check_list as $uid) {
    if ($account = user_load($uid)) {
      tgd_sso_check_user_account($account);
    }
  }
  if (!empty($uid)) {
    variable_set('tgd_sso_check_last_uid', $uid);
    variable_set('tgd_sso_check_last_time', REQUEST_TIME);
  }
  else {
    // No users selected, set last uid to 0 to restart.
    variable_del('tgd_sso_check_last_uid');
  }
}

/**
 * Check single user account, update if not up to date.
 *
 * @param object $account
 *   Drupal user account
 */
function tgd_sso_check_user_account($account) {
  $tgdUser = TGDUserManager::getRemoteUser($account);
  if ($tgdUser && $tgdUser->load()) {
    $result = TGDUserManager::checkDrupalUser($account, $tgdUser);
  }
  else {
    // Log but don't do anything with the user, there may be only a connection error.
    tgd_sso_log('Cannot load remote user for local user account !drupal-user', $account, $tgdUser, WATCHDOG_WARNING);
  }
}

