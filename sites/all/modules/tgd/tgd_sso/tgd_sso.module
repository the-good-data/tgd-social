<?php
/**
 * @file
 * TGD SSO Client module.
 *
 * Implementation notes
 * - TGD - SSO - Use Cases and Implementation Proposal
 *   https://docs.google.com/a/reyero.net/document/d/1eK_2apqFkPOPsIkQmuGISMAs8SQca1mrmL4GL0uTsVs/edit#
 */

use Drupal\tgd_sso\TGDClient;
use Drupal\tgd_sso\TGDUser;
use Drupal\tgd_sso\TGDUserManager;
use Drupal\tgd_sso\TGDLogger;

/**
 * Define some end point paths
 */
define('TGD_SSO_PATH_LOGIN', 'sign-in');
define('TGD_SSO_PATH_LOGOUT', 'user/logout');

/**
 * Implements hook_init().
 */
function tgd_sso_init() {
  global $user;

  if (!variable_get('tgd_sso_local_enable')) {
    return;
  }

  // @TODO Rethink logic here

  // Check if logged in with special user accounts first.
  if ($user->uid && user_access('tgd sso local login')) {
    // Ok, admin user logged in, move on...
    $status = TRUE;
  }
  elseif ($tgdUser = tgd_sso_check_current_session()) {
    // First go for seamless authentication.
    // Ok, we've got a TGD user, check against current drupal user
    // and log in if needed.
    $status = tgd_sso_check_current_user($tgdUser);
  }
  elseif ($user->uid) {
    // No user logged in, log out current user if any.

    // @TODO Lot out current user, skip for site admins...?
    $status = FALSE;
  }

  // Something went really wrong, print access denied and get out!!
  if (!$status) {
    drupal_set_message(t('TGD SSO Authentication Error'), 'error');
    drupal_access_denied();
    exit();
  }
}


/**
 * Implements hook_menu().
 */
function tgd_sso_menu() {
  // @TODO Admin page
  // @TODO Callback pages
  // - edit profile
  // - log out
  // - log in

  // Admin pages
  $items['admin/config/tgd/sso'] = array(
    'title' => 'SSO Client',
    'description' => 'Configure Single Sign On client',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('variable_group_form', 'tgd_sso'),
    'access arguments' => array('administer site configuration'),
    'weight' => -1,
  );
  $items['admin/people/tgd_sso'] = array(
    'title' => 'TGD SSO',
    'description' => 'Administer TGD SSO user mapping',
    'page callback' => 'tgd_sso_admin_page_users',
    'access arguments' => array('administer users'),
    'file' => 'tgd_sso.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function tgd_sso_menu_alter(&$items) {
  // @TODO Replace all Drupal user pages
  if (variable_get('tgd_sso_local_disable')) {
    module_load_include('inc', 'tgd_sso', 'tgd_sso.pages');
    _tgd_sso_menu_alter($items);
  }
}

/**
 * Implements hook_permission().
 */
function akademia_base_permission() {
  $permissions = array(
    'tgd sso local login' => array(
      'title' => t('Login with local user account'),
      'description' => t('Allows logging in with local user accounts, without using SSO system.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}

/**
 * Implements hook_user_load().
 *
 * @TODO Maybe better override entity loading callback.
 */
function tgd_sso_user_load($users) {
  if (variable_get('tgd_sso_local_enable')) {
    TGDUserManager::loadMultipleUsers($users);
  }
}

/**
 * Implements hook_user_delete().
 */
function tgd_sso_user_update(&$edit, $account, $category) {
  if (variable_get('tgd_sso_local_enable')) {
    //TGDUserManager::updateUserMapping($account);
  }
}

/**
 * Implements hook_user_delete().
 */
function tgd_sso_user_delete($account) {
  TGDUserManager::deleteUserMapping($account);
}

/**
 * Get Client object.
 *
 * Client is statically cached so it can be reused withing the same request.
 *
 * @return \Drupal\tgd_sso\TGDClient
 */
function tgd_sso_client() {
  static $client;

  if (!isset($client)) {
    // First get HttpClient and params.
    // @todo Check we've got all this, error if not.
    $httpClient = http_client();
    $baseUrl = variable_get_value('tgd_sso_base_url');
    $authToken = variable_get_value('tgd_sso_auth_token');
    $logger = new TGDLogger(array(
      'debug' => variable_get('tgd_sso_debug_enable'),
      'callback' => 'tgd_sso_log_message',
    ));
    $client = new TGDClient($baseUrl, $authToken, $httpClient, $logger);
  }

  return $client;
}

/**
 * Check whether user is logged into Webapp
 *
 * - Use shared cookie
 *
 * @return TGDUser|NULL
 *   TGDUser with login data only.
 */
function tgd_sso_check_current_session() {
  // Check shared cookie.
  $cookie_name = variable_get('tgd_sso_shared_cookie', 'PHPSESSID');
  if (isset($_COOKIE[$cookie_name])) {
    return tgd_sso_client()->getUserByToken($_COOKIE[$cookie_name]);
  }
}

/**
 * Check TGD user against current Drupal user
 *
 * @param Drupal\tgd_sso\TGDUser $user
 *   Remote user
 */
function tgd_sso_check_current_user($tgdUser) {
  global $user;

  if ($user->uid) {
    // User logged in, check it matches an is up to date.
    if (TGDUserManager::checkDrupalUser($user, $tgdUser))  {
      watchdog('tgd_user', 'User authenticated remotely');
      return TRUE;
    }
    else {
      tgd_log_error('Current logged in user not matching master user ID', $tgdUser);
      return FALSE;
    }
  }
  else {
    // User not logged in. Do user log-in
    $account = TGDUserManager::getDrupalUser($tgdUser);
    if ($account && TGDUserManager::checkDrupalUser($account, $tgdUser)) {
      watchdog('tgd_sso', 'Logging in remote user @id as Drupal user @uid', array(
        '@id' => $tgdUser->id,
        '@uid' => $account->uid,
      ));
      // WARNING: We are setting here global user object.
      $user = $account;
      user_login_finalize();
    }
    else {
      tgd_log_error('Cannot get Drupal user from remote user', $tgdUser);
    }
  }
}

/**
 * Produce links to send user to master server.
 *
 * @param string $type
 *   'login' | 'logout' | 'edit'
 * @return array
 *   Link array with 'text', 'path', 'options'.
 *   It can be rendered with theme('link', $link)
 */
function tgd_sso_master_link($type, $text = NULL) {
  $link = array(
    'text' => $text,
    'path' => '',
    'options' => array(),
  );
  $link['options'] = array(
    'external' => TRUE,
    'absolute' => TRUE,
    'base_url' => variable_get_value('tgd_sso_base_url'),
  );
  $link['options']['attributes']['class'] = array('tgd-sso-link', 'tgd-sso-' . $type);

  // Now, depending on type.
  switch ($type) {
    case 'login':
      $link['path'] = 'sign-in';
      break;
    case 'logout':
      $link['path'] = 'user/logout';
      break;
    case 'view':
      // @TODO Link to view user profile ?.
      break;
    case 'edit':
      // @TODO Link to edit user profile ?.
      break;
  }

  // Add return url.
  $destination = drupal_get_destination();
  // @TODO Q: Need url-encoding?
  $link['options']['query']['next'] = url($destination['destination'], array('absolute' => TRUE));

  return $link;
}

/**
 * Logging callback.
 */
function tgd_sso_log_message($message, $args, $args_string, $severity) {
  switch ($severity) {
    case TGDLogger::ERROR:
      $level = WATCHDOG_ERROR;
      $type = 'error';
      break;
    case TGDLogger::WARNING:
      $level = WATCHDOG_WARNING;
      $type = 'warning';
      break;
    default:
      $level = WATCHDOG_NOTICE;
      $type = 'status';
      break;
  }
  // Watchdog all.
  watchdog('tgd_sso', $message . ($args ? '[' . $args_string . ']' : ''), array(), $level);
  // Print only if debug mode and devel enabled.
  if (function_exists('dpm') && variable_get('tgd_sso_debug_enable')) {
    dpm($args, $message);
  }
}

/**
 * Error logging function.
 */
function tgd_log_error($message, $object = NULL) {
  if ($object) {
    $message .= ' [' . (string)$object . ']';
  }
  // @todo Replace by proper watchdogs in every case.
  watchdog('tgd_sso', 'TGD SSO Error: !message', array('!message' => $message), WATCHDOG_ERROR);
  // @todo Replace by human readable message.
  drupal_set_message(t('TGD SSO Error: !message', array('!message' => $message)), 'error');
}

